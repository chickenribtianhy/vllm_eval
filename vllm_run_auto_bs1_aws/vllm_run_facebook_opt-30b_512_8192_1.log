INFO 08-18 01:28:27 [__init__.py:243] Automatically detected platform cuda.
benchmarking facebook_opt-30b_prompt512_gen8192_bs1
kv cache size per request: 11.15625 GB
offloading 50 GB model weights
INFO 08-18 01:28:30 [__init__.py:31] Available plugins for group vllm.general_plugins:
INFO 08-18 01:28:30 [__init__.py:33] - lora_filesystem_resolver -> vllm.plugins.lora_resolvers.filesystem_resolver:register_filesystem_resolver
INFO 08-18 01:28:30 [__init__.py:36] All plugins in this group will be loaded. Set `VLLM_PLUGINS` to control which plugins to load.
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
INFO 08-18 01:28:37 [config.py:793] This model supports multiple tasks: {'reward', 'classify', 'embed', 'score', 'generate'}. Defaulting to 'generate'.
INFO 08-18 01:28:37 [llm_engine.py:230] Initializing a V0 LLM engine (v0.9.0.2.dev1+g0755d3cc1) with config: model='facebook/opt-30b', speculative_config=None, tokenizer='facebook/opt-30b', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, override_neuron_config={}, tokenizer_revision=None, trust_remote_code=False, dtype=torch.float16, max_seq_len=8704, download_dir=None, load_format=LoadFormat.DUMMY, tensor_parallel_size=1, pipeline_parallel_size=1, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto,  device_config=cuda, decoding_config=DecodingConfig(backend='auto', disable_fallback=False, disable_any_whitespace=False, disable_additional_properties=False, reasoning_backend=''), observability_config=ObservabilityConfig(show_hidden_metrics_for_version=None, otlp_traces_endpoint=None, collect_detailed_traces=None), seed=None, served_model_name=facebook/opt-30b, num_scheduler_steps=1, multi_step_stream_outputs=True, enable_prefix_caching=None, chunked_prefill_enabled=False, use_async_output_proc=True, pooler_config=None, compilation_config={"compile_sizes": [], "inductor_compile_config": {"enable_auto_functionalized_v2": false}, "cudagraph_capture_sizes": [32, 24, 16, 8, 4, 2, 1], "max_capture_size": 32}, use_cached_outputs=False, 
INFO 08-18 01:28:39 [cuda.py:292] Using Flash Attention backend.
INFO 08-18 01:28:39 [parallel_state.py:1064] rank 0 in world size 1 is assigned as DP rank 0, PP rank 0, TP rank 0, EP rank 0
INFO 08-18 01:28:39 [model_runner.py:1170] Starting to load model facebook/opt-30b...
INFO 08-18 01:32:15 [model_runner.py:1202] Model loading took 5.7666 GiB and 216.066707 seconds
INFO 08-18 01:32:28 [worker.py:291] Memory profiling takes 12.46 seconds
INFO 08-18 01:32:28 [worker.py:291] the current vLLM instance can use total_gpu_memory (21.98GiB) x gpu_memory_utilization (0.90) = 19.78GiB
INFO 08-18 01:32:28 [worker.py:291] model weights take 5.77GiB; non_torch_memory takes 0.20GiB; PyTorch activation peak memory takes 2.56GiB; the rest of the memory reserved for KV Cache is 11.26GiB.
INFO 08-18 01:32:28 [executor_base.py:112] # cuda blocks: 549, # CPU blocks: 0
INFO 08-18 01:32:28 [executor_base.py:117] Maximum concurrency for 8704 tokens per request: 1.01x
INFO 08-18 01:32:28 [model_runner.py:1512] Capturing cudagraphs for decoding. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI. If out-of-memory error occurs during cudagraph capture, consider decreasing `gpu_memory_utilization` or switching to eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
Capturing CUDA graph shapes:   0%|          | 0/7 [00:00<?, ?it/s]Capturing CUDA graph shapes:  14%|█▍        | 1/7 [00:08<00:52,  8.75s/it]Capturing CUDA graph shapes:  29%|██▊       | 2/7 [00:17<00:43,  8.71s/it]Capturing CUDA graph shapes:  43%|████▎     | 3/7 [00:26<00:35,  8.77s/it]Capturing CUDA graph shapes:  57%|█████▋    | 4/7 [00:34<00:26,  8.73s/it]Capturing CUDA graph shapes:  71%|███████▏  | 5/7 [00:43<00:17,  8.71s/it]Capturing CUDA graph shapes:  86%|████████▌ | 6/7 [00:52<00:08,  8.69s/it]Capturing CUDA graph shapes: 100%|██████████| 7/7 [01:00<00:00,  8.69s/it]Capturing CUDA graph shapes: 100%|██████████| 7/7 [01:00<00:00,  8.71s/it]
INFO 08-18 01:33:29 [model_runner.py:1670] Graph capturing finished in 61 secs, took 1.25 GiB
INFO 08-18 01:33:29 [llm_engine.py:428] init engine (profile, create kv cache, warmup model) took 73.80 seconds
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
INFO 08-18 01:33:38 [metrics.py:486] Avg prompt throughput: 58.20372 tokens/s, Avg generation throughput: 0.22736 tokens/s, Running: 1 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 6.01093%, CPU KV cache usage: 0.00000%.
INFO 08-18 01:33:46 [metrics.py:486] Avg prompt throughput: 0.00000 tokens/s, Avg generation throughput: 0.24229 tokens/s, Running: 1 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 6.01093%, CPU KV cache usage: 0.00000%.
INFO 08-18 01:33:54 [metrics.py:486] Avg prompt throughput: 0.00000 tokens/s, Avg generation throughput: 0.24227 tokens/s, Running: 1 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 6.01093%, CPU KV cache usage: 0.00000%.
INFO 08-18 01:34:03 [metrics.py:486] Avg prompt throughput: 0.00000 tokens/s, Avg generation throughput: 0.24230 tokens/s, Running: 1 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 6.01093%, CPU KV cache usage: 0.00000%.
INFO 08-18 01:34:11 [metrics.py:486] Avg prompt throughput: 0.00000 tokens/s, Avg generation throughput: 0.23990 tokens/s, Running: 1 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 6.01093%, CPU KV cache usage: 0.00000%.
INFO 08-18 01:34:19 [metrics.py:486] Avg prompt throughput: 0.00000 tokens/s, Avg generation throughput: 0.24228 tokens/s, Running: 1 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 6.01093%, CPU KV cache usage: 0.00000%.
INFO 08-18 01:34:28 [metrics.py:486] Avg prompt throughput: 0.00000 tokens/s, Avg generation throughput: 0.24229 tokens/s, Running: 1 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 6.01093%, CPU KV cache usage: 0.00000%.
INFO 08-18 01:34:36 [metrics.py:486] Avg prompt throughput: 0.00000 tokens/s, Avg generation throughput: 0.24229 tokens/s, Running: 1 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 6.01093%, CPU KV cache usage: 0.00000%.
INFO 08-18 01:34:44 [metrics.py:486] Avg prompt throughput: 0.00000 tokens/s, Avg generation throughput: 0.24229 tokens/s, Running: 1 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 6.19308%, CPU KV cache usage: 0.00000%.
[rank0]: Traceback (most recent call last):
[rank0]:   File "/home/ubuntu/vllm_eval/main.py", line 119, in <module>
[rank0]:     benchmark(args.model, args.prompt_len, args.gen_len, args.batch_size, args.tensor_parallelism)
[rank0]:   File "/home/ubuntu/vllm_eval/main.py", line 67, in benchmark
[rank0]:     responses = llm.generate(prompts, sampling_params)
[rank0]:                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[rank0]:   File "/home/ubuntu/vllm/vllm/utils.py", line 1218, in inner
[rank0]:     return fn(*args, **kwargs)
[rank0]:            ^^^^^^^^^^^^^^^^^^^
[rank0]:   File "/home/ubuntu/vllm/vllm/entrypoints/llm.py", line 481, in generate
[rank0]:     outputs = self._run_engine(use_tqdm=use_tqdm)
[rank0]:               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[rank0]:   File "/home/ubuntu/vllm/vllm/entrypoints/llm.py", line 1476, in _run_engine
[rank0]:     step_outputs = self.llm_engine.step()
[rank0]:                    ^^^^^^^^^^^^^^^^^^^^^^
[rank0]:   File "/home/ubuntu/vllm/vllm/engine/llm_engine.py", line 1393, in step
[rank0]:     outputs = self.model_executor.execute_model(
[rank0]:               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[rank0]:   File "/home/ubuntu/vllm/vllm/executor/executor_base.py", line 140, in execute_model
[rank0]:     output = self.collective_rpc("execute_model",
[rank0]:              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[rank0]:   File "/home/ubuntu/vllm/vllm/executor/uniproc_executor.py", line 56, in collective_rpc
[rank0]:     answer = run_method(self.driver_worker, method, args, kwargs)
[rank0]:              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[rank0]:   File "/home/ubuntu/vllm/vllm/utils.py", line 2605, in run_method
[rank0]:     return func(*args, **kwargs)
[rank0]:            ^^^^^^^^^^^^^^^^^^^^^
[rank0]:   File "/home/ubuntu/vllm/vllm/worker/worker_base.py", line 420, in execute_model
[rank0]:     output = self.model_runner.execute_model(
[rank0]:              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[rank0]:   File "/home/ubuntu/miniconda3/envs/vllm/lib/python3.12/site-packages/torch/utils/_contextlib.py", line 116, in decorate_context
[rank0]:     return func(*args, **kwargs)
[rank0]:            ^^^^^^^^^^^^^^^^^^^^^
[rank0]:   File "/home/ubuntu/vllm/vllm/worker/model_runner.py", line 1906, in execute_model
[rank0]:     output: SamplerOutput = self.sampler(
[rank0]:                             ^^^^^^^^^^^^^
[rank0]:   File "/home/ubuntu/miniconda3/envs/vllm/lib/python3.12/site-packages/torch/nn/modules/module.py", line 1751, in _wrapped_call_impl
[rank0]:     return self._call_impl(*args, **kwargs)
[rank0]:            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[rank0]:   File "/home/ubuntu/miniconda3/envs/vllm/lib/python3.12/site-packages/torch/nn/modules/module.py", line 1762, in _call_impl
[rank0]:     return forward_call(*args, **kwargs)
[rank0]:            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[rank0]:   File "/home/ubuntu/vllm/vllm/model_executor/layers/sampler.py", line 280, in forward
[rank0]:     logits = logits.to(torch.float)
[rank0]:              ^^^^^^^^^^^^^^^^^^^^^^
[rank0]: KeyboardInterrupt
[rank0]:[W818 01:34:53.472559161 ProcessGroupNCCL.cpp:1476] Warning: WARNING: destroy_process_group() was not called before program exit, which can leak resources. For more info, please see https://pytorch.org/docs/stable/distributed.html#shutdown (function operator())
