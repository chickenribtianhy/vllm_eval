INFO 08-04 08:36:11 [__init__.py:244] Automatically detected platform cuda.
benchmarking facebook_opt-30b_prompt128_gen1_bs1
kv cache size per request: 0.16534423828125 GB
offloading 16 GB model weights
INFO 08-04 08:36:21 [config.py:823] This model supports multiple tasks: {'classify', 'score', 'embed', 'reward', 'generate'}. Defaulting to 'generate'.
INFO 08-04 08:36:21 [config.py:1946] Defaulting to use mp for distributed inference
INFO 08-04 08:36:21 [llm_engine.py:230] Initializing a V0 LLM engine (v0.9.1) with config: model='facebook/opt-30b', speculative_config=None, tokenizer='facebook/opt-30b', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, override_neuron_config={}, tokenizer_revision=None, trust_remote_code=False, dtype=torch.float16, max_seq_len=1024, download_dir=None, load_format=LoadFormat.DUMMY, tensor_parallel_size=2, pipeline_parallel_size=1, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto,  device_config=cuda, decoding_config=DecodingConfig(backend='auto', disable_fallback=False, disable_any_whitespace=False, disable_additional_properties=False, reasoning_backend=''), observability_config=ObservabilityConfig(show_hidden_metrics_for_version=None, otlp_traces_endpoint=None, collect_detailed_traces=None), seed=None, served_model_name=facebook/opt-30b, num_scheduler_steps=1, multi_step_stream_outputs=True, enable_prefix_caching=None, chunked_prefill_enabled=False, use_async_output_proc=True, pooler_config=None, compilation_config={"level":0,"debug_dump_path":"","cache_dir":"","backend":"","custom_ops":[],"splitting_ops":[],"use_inductor":true,"compile_sizes":[],"inductor_compile_config":{"enable_auto_functionalized_v2":false},"inductor_passes":{},"use_cudagraph":true,"cudagraph_num_of_warmups":0,"cudagraph_capture_sizes":[32,24,16,8,4,2,1],"cudagraph_copy_inputs":false,"full_cuda_graph":false,"max_capture_size":32,"local_cache_dir":null}, use_cached_outputs=False, 
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
[1;36m(VllmWorkerProcess pid=3239)[0;0m INFO 08-04 08:36:21 [multiproc_worker_utils.py:226] Worker ready; awaiting tasks
[1;36m(VllmWorkerProcess pid=3239)[0;0m INFO 08-04 08:36:22 [cuda.py:275] Cannot use FlashAttention-2 backend for Volta and Turing GPUs.
[1;36m(VllmWorkerProcess pid=3239)[0;0m INFO 08-04 08:36:22 [cuda.py:324] Using XFormers backend.
INFO 08-04 08:36:22 [cuda.py:275] Cannot use FlashAttention-2 backend for Volta and Turing GPUs.
INFO 08-04 08:36:22 [cuda.py:324] Using XFormers backend.
[1;36m(VllmWorkerProcess pid=3239)[0;0m INFO 08-04 08:36:23 [utils.py:1126] Found nccl from library libnccl.so.2
INFO 08-04 08:36:23 [utils.py:1126] Found nccl from library libnccl.so.2
INFO 08-04 08:36:23 [pynccl.py:70] vLLM is using nccl==2.26.2
[1;36m(VllmWorkerProcess pid=3239)[0;0m INFO 08-04 08:36:23 [pynccl.py:70] vLLM is using nccl==2.26.2
[1;36m(VllmWorkerProcess pid=3239)[0;0m INFO 08-04 08:36:24 [custom_all_reduce_utils.py:246] reading GPU P2P access cache from /home/ubuntu/.cache/vllm/gpu_p2p_access_cache_for_0,1.json
INFO 08-04 08:36:24 [custom_all_reduce_utils.py:246] reading GPU P2P access cache from /home/ubuntu/.cache/vllm/gpu_p2p_access_cache_for_0,1.json
[1;36m(VllmWorkerProcess pid=3239)[0;0m WARNING 08-04 08:36:24 [custom_all_reduce.py:147] Custom allreduce is disabled because your platform lacks GPU P2P capability or P2P test failed. To silence this warning, specify disable_custom_all_reduce=True explicitly.
WARNING 08-04 08:36:24 [custom_all_reduce.py:147] Custom allreduce is disabled because your platform lacks GPU P2P capability or P2P test failed. To silence this warning, specify disable_custom_all_reduce=True explicitly.
INFO 08-04 08:36:24 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks=[1], buffer_handle=(1, 4194304, 6, 'psm_7bc40a1f'), local_subscribe_addr='ipc:///tmp/8951a945-7877-47c7-bb80-a8500f4d4a4a', remote_subscribe_addr=None, remote_addr_ipv6=False)
INFO 08-04 08:36:24 [parallel_state.py:1065] rank 0 in world size 2 is assigned as DP rank 0, PP rank 0, TP rank 0, EP rank 0
[1;36m(VllmWorkerProcess pid=3239)[0;0m INFO 08-04 08:36:24 [parallel_state.py:1065] rank 1 in world size 2 is assigned as DP rank 0, PP rank 0, TP rank 1, EP rank 1
INFO 08-04 08:36:24 [model_runner.py:1171] Starting to load model facebook/opt-30b...
[1;36m(VllmWorkerProcess pid=3239)[0;0m INFO 08-04 08:36:24 [model_runner.py:1171] Starting to load model facebook/opt-30b...
INFO 08-04 08:37:40 [model_runner.py:1203] Model loading took 11.8758 GiB and 75.482866 seconds
[1;36m(VllmWorkerProcess pid=3239)[0;0m INFO 08-04 08:37:41 [model_runner.py:1203] Model loading took 11.8758 GiB and 76.353070 seconds
[1;36m(VllmWorkerProcess pid=3239)[0;0m INFO 08-04 08:37:46 [worker.py:294] Memory profiling takes 4.75 seconds
[1;36m(VllmWorkerProcess pid=3239)[0;0m INFO 08-04 08:37:46 [worker.py:294] the current vLLM instance can use total_gpu_memory (15.77GiB) x gpu_memory_utilization (0.90) = 14.19GiB
[1;36m(VllmWorkerProcess pid=3239)[0;0m INFO 08-04 08:37:46 [worker.py:294] model weights take 11.88GiB; non_torch_memory takes 0.21GiB; PyTorch activation peak memory takes 0.80GiB; the rest of the memory reserved for KV Cache is 1.30GiB.
INFO 08-04 08:37:46 [worker.py:294] Memory profiling takes 4.84 seconds
INFO 08-04 08:37:46 [worker.py:294] the current vLLM instance can use total_gpu_memory (15.77GiB) x gpu_memory_utilization (0.90) = 14.19GiB
INFO 08-04 08:37:46 [worker.py:294] model weights take 11.88GiB; non_torch_memory takes 0.21GiB; PyTorch activation peak memory takes 0.80GiB; the rest of the memory reserved for KV Cache is 1.30GiB.
INFO 08-04 08:37:46 [executor_base.py:113] # cuda blocks: 126, # CPU blocks: 4876
INFO 08-04 08:37:46 [executor_base.py:118] Maximum concurrency for 1024 tokens per request: 1.97x
INFO 08-04 08:38:45 [model_runner.py:1513] Capturing cudagraphs for decoding. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI. If out-of-memory error occurs during cudagraph capture, consider decreasing `gpu_memory_utilization` or switching to eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
Capturing CUDA graph shapes:   0%|          | 0/7 [00:00<?, ?it/s][1;36m(VllmWorkerProcess pid=3239)[0;0m INFO 08-04 08:38:46 [model_runner.py:1513] Capturing cudagraphs for decoding. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI. If out-of-memory error occurs during cudagraph capture, consider decreasing `gpu_memory_utilization` or switching to eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
Capturing CUDA graph shapes:  14%|█▍        | 1/7 [00:04<00:28,  4.73s/it]Capturing CUDA graph shapes:  29%|██▊       | 2/7 [00:08<00:21,  4.39s/it]Capturing CUDA graph shapes:  43%|████▎     | 3/7 [00:13<00:17,  4.31s/it]Capturing CUDA graph shapes:  57%|█████▋    | 4/7 [00:17<00:12,  4.24s/it]Capturing CUDA graph shapes:  71%|███████▏  | 5/7 [00:21<00:08,  4.20s/it]Capturing CUDA graph shapes:  86%|████████▌ | 6/7 [00:25<00:04,  4.18s/it]Capturing CUDA graph shapes: 100%|██████████| 7/7 [00:30<00:00,  4.53s/it]Capturing CUDA graph shapes: 100%|██████████| 7/7 [00:30<00:00,  4.39s/it]
INFO 08-04 08:39:16 [model_runner.py:1671] Graph capturing finished in 31 secs, took 0.66 GiB
[1;36m(VllmWorkerProcess pid=3239)[0;0m INFO 08-04 08:39:16 [model_runner.py:1671] Graph capturing finished in 30 secs, took 0.66 GiB
INFO 08-04 08:39:16 [llm_engine.py:428] init engine (profile, create kv cache, warmup model) took 95.18 seconds
[rank0]: Traceback (most recent call last):
[rank0]:   File "/home/ubuntu/vllm_eval/main.py", line 118, in <module>
[rank0]:     benchmark(args.model, args.prompt_len, args.gen_len, args.batch_size, args.tensor_parallelism)
[rank0]:   File "/home/ubuntu/vllm_eval/main.py", line 75, in benchmark
[rank0]:     prefill_throughput, decode_throughput, avg_ttft, avg_tpot, total_prefill_time, total_decode_time = calculate_metrics(outputs=responses)
[rank0]:                                                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[rank0]:   File "/home/ubuntu/vllm_eval/utils.py", line 57, in calculate_metrics
[rank0]:     decode_throughput = total_generate_token / total_decode_time
[rank0]:                         ~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~
[rank0]: ZeroDivisionError: float division by zero
ERROR 08-04 08:39:38 [multiproc_worker_utils.py:121] Worker VllmWorkerProcess pid 3239 died, exit code: -15
/home/ubuntu/miniconda3/envs/vllm/lib/python3.12/multiprocessing/resource_tracker.py:279: UserWarning: resource_tracker: There appear to be 1 leaked shared_memory objects to clean up at shutdown
  warnings.warn('resource_tracker: There appear to be %d '
[rank0]:[W804 08:39:39.558157028 ProcessGroupNCCL.cpp:1476] Warning: WARNING: destroy_process_group() was not called before program exit, which can leak resources. For more info, please see https://pytorch.org/docs/stable/distributed.html#shutdown (function operator())
