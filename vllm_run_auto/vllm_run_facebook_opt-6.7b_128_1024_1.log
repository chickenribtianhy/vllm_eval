INFO 07-14 22:48:02 [__init__.py:243] Automatically detected platform cuda.
benchmarking facebook_opt-6.7b_prompt128_gen1024_bs1
INFO 07-14 22:48:04 [__init__.py:31] Available plugins for group vllm.general_plugins:
INFO 07-14 22:48:04 [__init__.py:33] - lora_filesystem_resolver -> vllm.plugins.lora_resolvers.filesystem_resolver:register_filesystem_resolver
INFO 07-14 22:48:04 [__init__.py:36] All plugins in this group will be loaded. Set `VLLM_PLUGINS` to control which plugins to load.
INFO 07-14 22:48:11 [config.py:793] This model supports multiple tasks: {'generate', 'reward', 'score', 'embed', 'classify'}. Defaulting to 'generate'.
INFO 07-14 22:48:11 [llm_engine.py:230] Initializing a V0 LLM engine (v0.9.0.1) with config: model='facebook/opt-6.7b', speculative_config=None, tokenizer='facebook/opt-6.7b', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, override_neuron_config={}, tokenizer_revision=None, trust_remote_code=False, dtype=torch.float16, max_seq_len=2048, download_dir=None, load_format=LoadFormat.DUMMY, tensor_parallel_size=1, pipeline_parallel_size=1, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto,  device_config=cuda, decoding_config=DecodingConfig(backend='auto', disable_fallback=False, disable_any_whitespace=False, disable_additional_properties=False, reasoning_backend=''), observability_config=ObservabilityConfig(show_hidden_metrics_for_version=None, otlp_traces_endpoint=None, collect_detailed_traces=None), seed=None, served_model_name=facebook/opt-6.7b, num_scheduler_steps=1, multi_step_stream_outputs=True, enable_prefix_caching=None, chunked_prefill_enabled=False, use_async_output_proc=True, pooler_config=None, compilation_config={"compile_sizes": [], "inductor_compile_config": {"enable_auto_functionalized_v2": false}, "cudagraph_capture_sizes": [32, 24, 16, 8, 4, 2, 1], "max_capture_size": 32}, use_cached_outputs=False, 
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
INFO 07-14 22:48:12 [cuda.py:292] Using Flash Attention backend.
INFO 07-14 22:48:12 [parallel_state.py:1064] rank 0 in world size 1 is assigned as DP rank 0, PP rank 0, TP rank 0, EP rank 0
INFO 07-14 22:48:12 [model_runner.py:1170] Starting to load model facebook/opt-6.7b...
INFO 07-14 22:48:13 [model_runner.py:1202] Model loading took 12.4037 GiB and 0.080633 seconds
INFO 07-14 22:48:14 [worker.py:291] Memory profiling takes 0.93 seconds
INFO 07-14 22:48:14 [worker.py:291] the current vLLM instance can use total_gpu_memory (79.15GiB) x gpu_memory_utilization (0.90) = 71.24GiB
INFO 07-14 22:48:14 [worker.py:291] model weights take 12.40GiB; non_torch_memory takes 0.09GiB; PyTorch activation peak memory takes 0.38GiB; the rest of the memory reserved for KV Cache is 58.36GiB.
INFO 07-14 22:48:14 [executor_base.py:112] # cuda blocks: 7469, # CPU blocks: 6400
INFO 07-14 22:48:14 [executor_base.py:117] Maximum concurrency for 2048 tokens per request: 58.35x
INFO 07-14 22:48:44 [model_runner.py:1512] Capturing cudagraphs for decoding. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI. If out-of-memory error occurs during cudagraph capture, consider decreasing `gpu_memory_utilization` or switching to eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
Capturing CUDA graph shapes:   0%|          | 0/7 [00:00<?, ?it/s]Capturing CUDA graph shapes:  14%|█▍        | 1/7 [00:00<00:02,  2.29it/s]Capturing CUDA graph shapes:  29%|██▊       | 2/7 [00:00<00:01,  2.77it/s]Capturing CUDA graph shapes:  43%|████▎     | 3/7 [00:01<00:01,  2.94it/s]Capturing CUDA graph shapes:  57%|█████▋    | 4/7 [00:01<00:01,  2.96it/s]Capturing CUDA graph shapes:  71%|███████▏  | 5/7 [00:01<00:00,  3.01it/s]Capturing CUDA graph shapes:  86%|████████▌ | 6/7 [00:02<00:00,  3.04it/s]Capturing CUDA graph shapes: 100%|██████████| 7/7 [00:02<00:00,  3.05it/s]Capturing CUDA graph shapes: 100%|██████████| 7/7 [00:02<00:00,  2.96it/s]
INFO 07-14 22:48:46 [model_runner.py:1670] Graph capturing finished in 2 secs, took 0.21 GiB
INFO 07-14 22:48:46 [llm_engine.py:428] init engine (profile, create kv cache, warmup model) took 33.22 seconds
INFO 07-14 22:48:51 [metrics.py:486] Avg prompt throughput: 25.5 tokens/s, Avg generation throughput: 85.8 tokens/s, Running: 1 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 0.5%, CPU KV cache usage: 0.0%.
INFO 07-14 22:48:56 [metrics.py:486] Avg prompt throughput: 0.0 tokens/s, Avg generation throughput: 84.9 tokens/s, Running: 1 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 0.8%, CPU KV cache usage: 0.0%.
[rank0]:[W714 22:48:59.163537915 ProcessGroupNCCL.cpp:1476] Warning: WARNING: destroy_process_group() was not called before program exit, which can leak resources. For more info, please see https://pytorch.org/docs/stable/distributed.html#shutdown (function operator())
