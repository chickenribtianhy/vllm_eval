INFO 07-02 12:24:31 [__init__.py:244] Automatically detected platform cuda.
benchmarking facebook_opt-1.3b_prompt128_gen2048_bs1
INFO 07-02 12:24:40 [config.py:823] This model supports multiple tasks: {'reward', 'score', 'generate', 'classify', 'embed'}. Defaulting to 'generate'.
INFO 07-02 12:24:40 [llm_engine.py:230] Initializing a V0 LLM engine (v0.9.1) with config: model='facebook/opt-1.3b', speculative_config=None, tokenizer='facebook/opt-1.3b', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, override_neuron_config={}, tokenizer_revision=None, trust_remote_code=False, dtype=torch.float16, max_seq_len=2048, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=1, pipeline_parallel_size=1, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto,  device_config=cuda, decoding_config=DecodingConfig(backend='auto', disable_fallback=False, disable_any_whitespace=False, disable_additional_properties=False, reasoning_backend=''), observability_config=ObservabilityConfig(show_hidden_metrics_for_version=None, otlp_traces_endpoint=None, collect_detailed_traces=None), seed=None, served_model_name=facebook/opt-1.3b, num_scheduler_steps=1, multi_step_stream_outputs=True, enable_prefix_caching=None, chunked_prefill_enabled=False, use_async_output_proc=True, pooler_config=None, compilation_config={"level":0,"debug_dump_path":"","cache_dir":"","backend":"","custom_ops":[],"splitting_ops":[],"use_inductor":true,"compile_sizes":[],"inductor_compile_config":{"enable_auto_functionalized_v2":false},"inductor_passes":{},"use_cudagraph":true,"cudagraph_num_of_warmups":0,"cudagraph_capture_sizes":[32,24,16,8,4,2,1],"cudagraph_copy_inputs":false,"full_cuda_graph":false,"max_capture_size":32,"local_cache_dir":null}, use_cached_outputs=False, 
INFO 07-02 12:24:41 [cuda.py:275] Cannot use FlashAttention-2 backend for Volta and Turing GPUs.
INFO 07-02 12:24:41 [cuda.py:324] Using XFormers backend.
INFO 07-02 12:24:42 [parallel_state.py:1065] rank 0 in world size 1 is assigned as DP rank 0, PP rank 0, TP rank 0, EP rank 0
INFO 07-02 12:24:42 [model_runner.py:1171] Starting to load model facebook/opt-1.3b...
INFO 07-02 12:24:42 [weight_utils.py:292] Using model weights format ['*.bin']
Loading pt checkpoint shards:   0% Completed | 0/1 [00:00<?, ?it/s]
Loading pt checkpoint shards: 100% Completed | 1/1 [00:02<00:00,  2.11s/it]
Loading pt checkpoint shards: 100% Completed | 1/1 [00:02<00:00,  2.11s/it]

INFO 07-02 12:24:44 [default_loader.py:272] Loading weights took 2.12 seconds
INFO 07-02 12:24:45 [model_runner.py:1203] Model loading took 2.4510 GiB and 2.279092 seconds
INFO 07-02 12:24:46 [worker.py:294] Memory profiling takes 0.63 seconds
INFO 07-02 12:24:46 [worker.py:294] the current vLLM instance can use total_gpu_memory (15.77GiB) x gpu_memory_utilization (0.90) = 14.19GiB
INFO 07-02 12:24:46 [worker.py:294] model weights take 2.45GiB; non_torch_memory takes 0.07GiB; PyTorch activation peak memory takes 0.20GiB; the rest of the memory reserved for KV Cache is 11.47GiB.
INFO 07-02 12:24:46 [executor_base.py:113] # cuda blocks: 3916, # CPU blocks: 17066
INFO 07-02 12:24:46 [executor_base.py:118] Maximum concurrency for 2048 tokens per request: 30.59x
INFO 07-02 12:25:28 [model_runner.py:1513] Capturing cudagraphs for decoding. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI. If out-of-memory error occurs during cudagraph capture, consider decreasing `gpu_memory_utilization` or switching to eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
Capturing CUDA graph shapes:   0%|          | 0/7 [00:00<?, ?it/s]Capturing CUDA graph shapes:  14%|█▍        | 1/7 [00:01<00:08,  1.37s/it]Capturing CUDA graph shapes:  29%|██▊       | 2/7 [00:02<00:06,  1.29s/it]Capturing CUDA graph shapes:  43%|████▎     | 3/7 [00:03<00:05,  1.33s/it]Capturing CUDA graph shapes:  57%|█████▋    | 4/7 [00:04<00:03,  1.03s/it]Capturing CUDA graph shapes:  71%|███████▏  | 5/7 [00:04<00:01,  1.24it/s]Capturing CUDA graph shapes:  86%|████████▌ | 6/7 [00:05<00:00,  1.49it/s]Capturing CUDA graph shapes: 100%|██████████| 7/7 [00:05<00:00,  1.70it/s]Capturing CUDA graph shapes: 100%|██████████| 7/7 [00:05<00:00,  1.21it/s]
INFO 07-02 12:25:34 [model_runner.py:1671] Graph capturing finished in 6 secs, took 0.08 GiB
INFO 07-02 12:25:34 [llm_engine.py:428] init engine (profile, create kv cache, warmup model) took 49.50 seconds
INFO 07-02 12:25:40 [metrics.py:417] Avg prompt throughput: 25.6 tokens/s, Avg generation throughput: 164.5 tokens/s, Running: 1 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 1.5%, CPU KV cache usage: 0.0%.
INFO 07-02 12:25:45 [metrics.py:417] Avg prompt throughput: 0.0 tokens/s, Avg generation throughput: 161.1 tokens/s, Running: 1 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 2.8%, CPU KV cache usage: 0.0%.
[rank0]: Traceback (most recent call last):
[rank0]:   File "/home/ubuntu/vllm/run_auto.py", line 168, in <module>
[rank0]:     benchmark(args.model, args.prompt_len, args.gen_len, args.batch_size, args.tensor_parallelism)
[rank0]:   File "/home/ubuntu/vllm/run_auto.py", line 129, in benchmark
[rank0]:     prefill_throughput, decode_throughput, avg_ttft, avg_tpot, total_prefill_time, total_decode_time = calculate_metrics(outputs=responses)
[rank0]:                                                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[rank0]:   File "/home/ubuntu/vllm/run_auto.py", line 69, in calculate_metrics
[rank0]:     total_prefill_time = max(o.metrics.first_token_time for o in outputs) - min(o.metrics.first_scheduled_time for o in outputs)
[rank0]:                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[rank0]: ValueError: max() iterable argument is empty
[rank0]:[W702 12:25:47.042453539 ProcessGroupNCCL.cpp:1476] Warning: WARNING: destroy_process_group() was not called before program exit, which can leak resources. For more info, please see https://pytorch.org/docs/stable/distributed.html#shutdown (function operator())
