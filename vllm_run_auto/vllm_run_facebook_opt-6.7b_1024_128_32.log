INFO 07-11 07:57:01 [__init__.py:244] Automatically detected platform cuda.
benchmarking facebook_opt-6.7b_prompt1024_gen128_bs32
INFO 07-11 07:57:16 [config.py:823] This model supports multiple tasks: {'reward', 'score', 'generate', 'classify', 'embed'}. Defaulting to 'generate'.
INFO 07-11 07:57:17 [llm_engine.py:230] Initializing a V0 LLM engine (v0.9.1) with config: model='facebook/opt-6.7b', speculative_config=None, tokenizer='facebook/opt-6.7b', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, override_neuron_config={}, tokenizer_revision=None, trust_remote_code=False, dtype=torch.float16, max_seq_len=2048, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=1, pipeline_parallel_size=1, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto,  device_config=cuda, decoding_config=DecodingConfig(backend='auto', disable_fallback=False, disable_any_whitespace=False, disable_additional_properties=False, reasoning_backend=''), observability_config=ObservabilityConfig(show_hidden_metrics_for_version=None, otlp_traces_endpoint=None, collect_detailed_traces=None), seed=None, served_model_name=facebook/opt-6.7b, num_scheduler_steps=1, multi_step_stream_outputs=True, enable_prefix_caching=None, chunked_prefill_enabled=False, use_async_output_proc=True, pooler_config=None, compilation_config={"level":0,"debug_dump_path":"","cache_dir":"","backend":"","custom_ops":[],"splitting_ops":[],"use_inductor":true,"compile_sizes":[],"inductor_compile_config":{"enable_auto_functionalized_v2":false},"inductor_passes":{},"use_cudagraph":true,"cudagraph_num_of_warmups":0,"cudagraph_capture_sizes":[32,24,16,8,4,2,1],"cudagraph_copy_inputs":false,"full_cuda_graph":false,"max_capture_size":32,"local_cache_dir":null}, use_cached_outputs=False, 
INFO 07-11 07:57:21 [cuda.py:275] Cannot use FlashAttention-2 backend for Volta and Turing GPUs.
INFO 07-11 07:57:21 [cuda.py:324] Using XFormers backend.
INFO 07-11 07:57:21 [parallel_state.py:1065] rank 0 in world size 1 is assigned as DP rank 0, PP rank 0, TP rank 0, EP rank 0
INFO 07-11 07:57:21 [model_runner.py:1171] Starting to load model facebook/opt-6.7b...
INFO 07-11 07:57:23 [weight_utils.py:292] Using model weights format ['*.bin']
INFO 07-11 07:57:23 [weight_utils.py:308] Time spent downloading weights for facebook/opt-6.7b: 0.517956 seconds
Loading pt checkpoint shards:   0% Completed | 0/2 [00:00<?, ?it/s]
Loading pt checkpoint shards:  50% Completed | 1/2 [00:07<00:07,  7.45s/it]
Loading pt checkpoint shards: 100% Completed | 2/2 [00:09<00:00,  4.56s/it]
Loading pt checkpoint shards: 100% Completed | 2/2 [00:09<00:00,  4.99s/it]

INFO 07-11 07:57:33 [default_loader.py:272] Loading weights took 9.99 seconds
INFO 07-11 07:57:33 [model_runner.py:1203] Model loading took 12.4037 GiB and 11.627257 seconds
INFO 07-11 07:57:35 [worker.py:294] Memory profiling takes 1.13 seconds
INFO 07-11 07:57:35 [worker.py:294] the current vLLM instance can use total_gpu_memory (15.77GiB) x gpu_memory_utilization (0.90) = 14.19GiB
INFO 07-11 07:57:35 [worker.py:294] model weights take 12.40GiB; non_torch_memory takes 0.07GiB; PyTorch activation peak memory takes 0.38GiB; the rest of the memory reserved for KV Cache is 1.33GiB.
INFO 07-11 07:57:35 [executor_base.py:113] # cuda blocks: 170, # CPU blocks: 6400
INFO 07-11 07:57:35 [executor_base.py:118] Maximum concurrency for 2048 tokens per request: 1.33x
INFO 07-11 07:58:03 [model_runner.py:1513] Capturing cudagraphs for decoding. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI. If out-of-memory error occurs during cudagraph capture, consider decreasing `gpu_memory_utilization` or switching to eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
Capturing CUDA graph shapes:   0%|          | 0/7 [00:00<?, ?it/s]Capturing CUDA graph shapes:  14%|█▍        | 1/7 [00:00<00:03,  1.97it/s]Capturing CUDA graph shapes:  29%|██▊       | 2/7 [00:00<00:02,  2.11it/s]Capturing CUDA graph shapes:  43%|████▎     | 3/7 [00:01<00:01,  2.05it/s]Capturing CUDA graph shapes:  57%|█████▋    | 4/7 [00:01<00:01,  2.16it/s]Capturing CUDA graph shapes:  71%|███████▏  | 5/7 [00:02<00:00,  2.22it/s]Capturing CUDA graph shapes:  86%|████████▌ | 6/7 [00:02<00:00,  2.28it/s]Capturing CUDA graph shapes: 100%|██████████| 7/7 [00:03<00:00,  2.25it/s]Capturing CUDA graph shapes: 100%|██████████| 7/7 [00:03<00:00,  2.20it/s]
INFO 07-11 07:58:07 [model_runner.py:1671] Graph capturing finished in 3 secs, took 0.08 GiB
INFO 07-11 07:58:07 [llm_engine.py:428] init engine (profile, create kv cache, warmup model) took 33.14 seconds
INFO 07-11 07:58:12 [metrics.py:417] Avg prompt throughput: 816.6 tokens/s, Avg generation throughput: 77.0 tokens/s, Running: 2 reqs, Swapped: 0 reqs, Pending: 28 reqs, GPU KV cache usage: 81.2%, CPU KV cache usage: 0.0%.
INFO 07-11 07:58:17 [metrics.py:417] Avg prompt throughput: 819.1 tokens/s, Avg generation throughput: 77.2 tokens/s, Running: 2 reqs, Swapped: 0 reqs, Pending: 24 reqs, GPU KV cache usage: 76.5%, CPU KV cache usage: 0.0%.
INFO 07-11 07:58:22 [metrics.py:417] Avg prompt throughput: 409.5 tokens/s, Avg generation throughput: 83.6 tokens/s, Running: 2 reqs, Swapped: 0 reqs, Pending: 22 reqs, GPU KV cache usage: 82.4%, CPU KV cache usage: 0.0%.
INFO 07-11 07:58:27 [metrics.py:417] Avg prompt throughput: 818.4 tokens/s, Avg generation throughput: 77.1 tokens/s, Running: 2 reqs, Swapped: 0 reqs, Pending: 18 reqs, GPU KV cache usage: 77.6%, CPU KV cache usage: 0.0%.
INFO 07-11 07:58:32 [metrics.py:417] Avg prompt throughput: 409.4 tokens/s, Avg generation throughput: 83.6 tokens/s, Running: 2 reqs, Swapped: 0 reqs, Pending: 16 reqs, GPU KV cache usage: 83.5%, CPU KV cache usage: 0.0%.
INFO 07-11 07:58:37 [metrics.py:417] Avg prompt throughput: 817.8 tokens/s, Avg generation throughput: 77.1 tokens/s, Running: 2 reqs, Swapped: 0 reqs, Pending: 12 reqs, GPU KV cache usage: 78.8%, CPU KV cache usage: 0.0%.
INFO 07-11 07:58:42 [metrics.py:417] Avg prompt throughput: 408.8 tokens/s, Avg generation throughput: 83.4 tokens/s, Running: 2 reqs, Swapped: 0 reqs, Pending: 10 reqs, GPU KV cache usage: 84.7%, CPU KV cache usage: 0.0%.
INFO 07-11 07:58:47 [metrics.py:417] Avg prompt throughput: 817.0 tokens/s, Avg generation throughput: 77.0 tokens/s, Running: 2 reqs, Swapped: 0 reqs, Pending: 6 reqs, GPU KV cache usage: 80.0%, CPU KV cache usage: 0.0%.
INFO 07-11 07:58:52 [metrics.py:417] Avg prompt throughput: 789.0 tokens/s, Avg generation throughput: 77.4 tokens/s, Running: 2 reqs, Swapped: 0 reqs, Pending: 2 reqs, GPU KV cache usage: 76.5%, CPU KV cache usage: 0.0%.
INFO 07-11 07:58:57 [metrics.py:417] Avg prompt throughput: 408.9 tokens/s, Avg generation throughput: 83.5 tokens/s, Running: 2 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 82.4%, CPU KV cache usage: 0.0%.
[rank0]:[W711 07:58:58.874915440 ProcessGroupNCCL.cpp:1476] Warning: WARNING: destroy_process_group() was not called before program exit, which can leak resources. For more info, please see https://pytorch.org/docs/stable/distributed.html#shutdown (function operator())
