INFO 07-01 12:58:57 [__init__.py:244] Automatically detected platform cuda.
benchmarking facebook_opt-1.3b_prompt128_gen1024_bs1
INFO 07-01 12:59:07 [config.py:823] This model supports multiple tasks: {'generate', 'reward', 'classify', 'embed', 'score'}. Defaulting to 'generate'.
INFO 07-01 12:59:07 [llm_engine.py:230] Initializing a V0 LLM engine (v0.9.1) with config: model='facebook/opt-1.3b', speculative_config=None, tokenizer='facebook/opt-1.3b', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, override_neuron_config={}, tokenizer_revision=None, trust_remote_code=False, dtype=torch.float16, max_seq_len=2048, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=1, pipeline_parallel_size=1, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto,  device_config=cuda, decoding_config=DecodingConfig(backend='auto', disable_fallback=False, disable_any_whitespace=False, disable_additional_properties=False, reasoning_backend=''), observability_config=ObservabilityConfig(show_hidden_metrics_for_version=None, otlp_traces_endpoint=None, collect_detailed_traces=None), seed=None, served_model_name=facebook/opt-1.3b, num_scheduler_steps=1, multi_step_stream_outputs=True, enable_prefix_caching=None, chunked_prefill_enabled=False, use_async_output_proc=True, pooler_config=None, compilation_config={"level":0,"debug_dump_path":"","cache_dir":"","backend":"","custom_ops":[],"splitting_ops":[],"use_inductor":true,"compile_sizes":[],"inductor_compile_config":{"enable_auto_functionalized_v2":false},"inductor_passes":{},"use_cudagraph":true,"cudagraph_num_of_warmups":0,"cudagraph_capture_sizes":[256,248,240,232,224,216,208,200,192,184,176,168,160,152,144,136,128,120,112,104,96,88,80,72,64,56,48,40,32,24,16,8,4,2,1],"cudagraph_copy_inputs":false,"full_cuda_graph":false,"max_capture_size":256,"local_cache_dir":null}, use_cached_outputs=False, 
INFO 07-01 12:59:09 [cuda.py:275] Cannot use FlashAttention-2 backend for Volta and Turing GPUs.
INFO 07-01 12:59:09 [cuda.py:324] Using XFormers backend.
INFO 07-01 12:59:09 [parallel_state.py:1065] rank 0 in world size 1 is assigned as DP rank 0, PP rank 0, TP rank 0, EP rank 0
INFO 07-01 12:59:09 [model_runner.py:1171] Starting to load model facebook/opt-1.3b...
INFO 07-01 12:59:10 [weight_utils.py:292] Using model weights format ['*.bin']
Loading pt checkpoint shards:   0% Completed | 0/1 [00:00<?, ?it/s]
Loading pt checkpoint shards: 100% Completed | 1/1 [00:02<00:00,  2.21s/it]
Loading pt checkpoint shards: 100% Completed | 1/1 [00:02<00:00,  2.21s/it]

INFO 07-01 12:59:12 [default_loader.py:272] Loading weights took 2.22 seconds
INFO 07-01 12:59:12 [model_runner.py:1203] Model loading took 2.4510 GiB and 2.527277 seconds
INFO 07-01 12:59:13 [worker.py:294] Memory profiling takes 0.54 seconds
INFO 07-01 12:59:13 [worker.py:294] the current vLLM instance can use total_gpu_memory (15.77GiB) x gpu_memory_utilization (0.90) = 14.19GiB
INFO 07-01 12:59:13 [worker.py:294] model weights take 2.45GiB; non_torch_memory takes 0.07GiB; PyTorch activation peak memory takes 0.47GiB; the rest of the memory reserved for KV Cache is 11.20GiB.
INFO 07-01 12:59:13 [executor_base.py:113] # cuda blocks: 3821, # CPU blocks: 6826
INFO 07-01 12:59:13 [executor_base.py:118] Maximum concurrency for 2048 tokens per request: 29.85x
INFO 07-01 12:59:24 [model_runner.py:1513] Capturing cudagraphs for decoding. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI. If out-of-memory error occurs during cudagraph capture, consider decreasing `gpu_memory_utilization` or switching to eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
Capturing CUDA graph shapes:   0%|          | 0/35 [00:00<?, ?it/s]Capturing CUDA graph shapes:   3%|▎         | 1/35 [00:00<00:17,  1.98it/s]Capturing CUDA graph shapes:   6%|▌         | 2/35 [00:00<00:15,  2.15it/s]Capturing CUDA graph shapes:   9%|▊         | 3/35 [00:01<00:14,  2.21it/s]Capturing CUDA graph shapes:  11%|█▏        | 4/35 [00:01<00:13,  2.25it/s]Capturing CUDA graph shapes:  14%|█▍        | 5/35 [00:02<00:13,  2.26it/s]Capturing CUDA graph shapes:  17%|█▋        | 6/35 [00:02<00:12,  2.27it/s]Capturing CUDA graph shapes:  20%|██        | 7/35 [00:03<00:12,  2.28it/s]Capturing CUDA graph shapes:  23%|██▎       | 8/35 [00:03<00:11,  2.28it/s]Capturing CUDA graph shapes:  26%|██▌       | 9/35 [00:03<00:11,  2.30it/s]Capturing CUDA graph shapes:  29%|██▊       | 10/35 [00:04<00:10,  2.30it/s]Capturing CUDA graph shapes:  31%|███▏      | 11/35 [00:04<00:10,  2.31it/s]Capturing CUDA graph shapes:  34%|███▍      | 12/35 [00:05<00:09,  2.31it/s]Capturing CUDA graph shapes:  37%|███▋      | 13/35 [00:05<00:09,  2.31it/s]Capturing CUDA graph shapes:  40%|████      | 14/35 [00:06<00:09,  2.31it/s]Capturing CUDA graph shapes:  43%|████▎     | 15/35 [00:06<00:08,  2.32it/s]Capturing CUDA graph shapes:  46%|████▌     | 16/35 [00:07<00:08,  2.32it/s]Capturing CUDA graph shapes:  49%|████▊     | 17/35 [00:07<00:07,  2.32it/s]Capturing CUDA graph shapes:  51%|█████▏    | 18/35 [00:07<00:07,  2.32it/s]Capturing CUDA graph shapes:  54%|█████▍    | 19/35 [00:08<00:06,  2.33it/s]Capturing CUDA graph shapes:  57%|█████▋    | 20/35 [00:08<00:06,  2.33it/s]Capturing CUDA graph shapes:  60%|██████    | 21/35 [00:09<00:06,  2.32it/s]Capturing CUDA graph shapes:  63%|██████▎   | 22/35 [00:09<00:05,  2.32it/s]Capturing CUDA graph shapes:  66%|██████▌   | 23/35 [00:10<00:05,  2.31it/s]Capturing CUDA graph shapes:  69%|██████▊   | 24/35 [00:10<00:04,  2.30it/s]Capturing CUDA graph shapes:  71%|███████▏  | 25/35 [00:10<00:04,  2.30it/s]Capturing CUDA graph shapes:  74%|███████▍  | 26/35 [00:11<00:03,  2.31it/s]Capturing CUDA graph shapes:  77%|███████▋  | 27/35 [00:11<00:03,  2.32it/s]Capturing CUDA graph shapes:  80%|████████  | 28/35 [00:12<00:03,  2.32it/s]Capturing CUDA graph shapes:  83%|████████▎ | 29/35 [00:12<00:02,  2.32it/s]Capturing CUDA graph shapes:  86%|████████▌ | 30/35 [00:13<00:02,  2.33it/s]Capturing CUDA graph shapes:  89%|████████▊ | 31/35 [00:13<00:01,  2.21it/s]Capturing CUDA graph shapes:  91%|█████████▏| 32/35 [00:13<00:01,  2.25it/s]Capturing CUDA graph shapes:  94%|█████████▍| 33/35 [00:14<00:00,  2.26it/s]Capturing CUDA graph shapes:  97%|█████████▋| 34/35 [00:14<00:00,  2.28it/s]Capturing CUDA graph shapes: 100%|██████████| 35/35 [00:15<00:00,  2.27it/s]Capturing CUDA graph shapes: 100%|██████████| 35/35 [00:15<00:00,  2.29it/s]
INFO 07-01 12:59:39 [model_runner.py:1671] Graph capturing finished in 15 secs, took 0.19 GiB
INFO 07-01 12:59:39 [llm_engine.py:428] init engine (profile, create kv cache, warmup model) took 27.06 seconds
INFO 07-01 12:59:45 [metrics.py:417] Avg prompt throughput: 25.6 tokens/s, Avg generation throughput: 165.2 tokens/s, Running: 1 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 1.6%, CPU KV cache usage: 0.0%.
[rank0]:[W701 12:59:46.544582836 ProcessGroupNCCL.cpp:1476] Warning: WARNING: destroy_process_group() was not called before program exit, which can leak resources. For more info, please see https://pytorch.org/docs/stable/distributed.html#shutdown (function operator())
