benchmarking facebook_opt-6.7b_prompt128_gen512_bs4
INFO 07-12 15:57:23 llm_engine.py:223] Initializing an LLM engine (v0.6.1.post1) with config: model='facebook/opt-6.7b', speculative_config=None, tokenizer='facebook/opt-6.7b', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, override_neuron_config=None, rope_scaling=None, rope_theta=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.float16, max_seq_len=2048, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=1, pipeline_parallel_size=1, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), observability_config=ObservabilityConfig(otlp_traces_endpoint=None, collect_model_forward_time=False, collect_model_execute_time=False), seed=0, served_model_name=facebook/opt-6.7b, use_v2_block_manager=False, num_scheduler_steps=1, enable_prefix_caching=False, use_async_output_proc=True)
INFO 07-12 15:57:25 selector.py:217] Cannot use FlashAttention-2 backend for Volta and Turing GPUs.
INFO 07-12 15:57:25 selector.py:116] Using XFormers backend.
/home/ubuntu/miniconda3/envs/vllmold/lib/python3.12/site-packages/xformers/ops/fmha/flash.py:211: FutureWarning: `torch.library.impl_abstract` was renamed to `torch.library.register_fake`. Please use that instead; we will remove `torch.library.impl_abstract` in a future version of PyTorch.
  @torch.library.impl_abstract("xformers_flash::flash_fwd")
/home/ubuntu/miniconda3/envs/vllmold/lib/python3.12/site-packages/xformers/ops/fmha/flash.py:344: FutureWarning: `torch.library.impl_abstract` was renamed to `torch.library.register_fake`. Please use that instead; we will remove `torch.library.impl_abstract` in a future version of PyTorch.
  @torch.library.impl_abstract("xformers_flash::flash_bwd")
INFO 07-12 15:57:25 model_runner.py:997] Starting to load model facebook/opt-6.7b...
INFO 07-12 15:57:25 selector.py:217] Cannot use FlashAttention-2 backend for Volta and Turing GPUs.
INFO 07-12 15:57:25 selector.py:116] Using XFormers backend.
INFO 07-12 15:57:26 weight_utils.py:242] Using model weights format ['*.bin']
Loading pt checkpoint shards:   0% Completed | 0/2 [00:00<?, ?it/s]
/home/ubuntu/miniconda3/envs/vllmold/lib/python3.12/site-packages/vllm/model_executor/model_loader/weight_utils.py:424: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  state = torch.load(bin_file, map_location="cpu")
Loading pt checkpoint shards:  50% Completed | 1/2 [00:10<00:10, 10.42s/it]
Loading pt checkpoint shards: 100% Completed | 2/2 [00:13<00:00,  5.86s/it]
Loading pt checkpoint shards: 100% Completed | 2/2 [00:13<00:00,  6.54s/it]

INFO 07-12 15:57:40 model_runner.py:1008] Loading model weights took 12.4036 GB
INFO 07-12 15:57:41 gpu_executor.py:122] # GPU blocks: 148, # CPU blocks: 6400
INFO 07-12 15:58:10 model_runner.py:1309] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
INFO 07-12 15:58:10 model_runner.py:1313] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 07-12 15:58:12 model_runner.py:1428] Graph capturing finished in 2 secs.
INFO 07-12 15:58:17 metrics.py:351] Avg prompt throughput: 102.0 tokens/s, Avg generation throughput: 178.5 tokens/s, Running: 4 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 59.5%, CPU KV cache usage: 0.0%.
INFO 07-12 15:58:22 metrics.py:351] Avg prompt throughput: 0.0 tokens/s, Avg generation throughput: 176.9 tokens/s, Running: 4 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 97.3%, CPU KV cache usage: 0.0%.
WARNING 07-12 15:58:22 scheduler.py:1362] Sequence group 3 is preempted by PreemptionMode.SWAP mode because there is not enough KV cache space. This can affect the end-to-end performance. Increase gpu_memory_utilization or tensor_parallel_size to provide more KV cache memory. total_num_cumulative_preemption=1
